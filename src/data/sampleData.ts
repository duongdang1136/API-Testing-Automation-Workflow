import { APISpecification, User, TestRequirement, TestScript, AuthUser, Project, Feature, Version } from '../types/models';

export const sampleUsers: User[] = [
  {
    id: 'user-001',
    name: 'Nguyen Van Minh',
    email: 'minh.nguyen@company.com',
    role: 'QC',
  },
  {
    id: 'user-002',
    name: 'Tran Thi Lan',
    email: 'lan.tran@company.com',
    role: 'BA',
  },
  {
    id: 'user-003',
    name: 'Le Hoang Nam',
    email: 'nam.le@company.com',
    role: 'Developer',
  },
];

export const sampleAPISpecs: APISpecification[] = [
  {
    id: 'api-fpt-001',
    name: 'FPT Play - User Login API',
    endpoint: '/api/v2/auth/login',
    method: 'POST',
    description: 'Authenticate user and return access token for FPT Play streaming service',
    fields: [
      { name: 'username', dataType: 'string', required: true, validation: 'email or phone number', example: 'user@fptplay.vn' },
      { name: 'password', dataType: 'string', required: true, validation: 'min 6 chars', example: 'FptPlay@123' },
      { name: 'deviceId', dataType: 'string', required: true, validation: 'UUID format', example: 'dev-abc123-xyz789' },
      { name: 'deviceType', dataType: 'string', required: true, validation: 'enum: web, mobile, tv, tablet', example: 'web' },
    ],
    statusCodes: [
      { code: 200, description: 'Login successful', scenario: 'Valid credentials and device' },
      { code: 400, description: 'Bad request', scenario: 'Missing required fields' },
      { code: 401, description: 'Unauthorized', scenario: 'Invalid username or password' },
      { code: 403, description: 'Forbidden', scenario: 'Account suspended or device limit reached' },
      { code: 429, description: 'Too many requests', scenario: 'Rate limit exceeded' },
    ],
    businessRules: [
      'Maximum 5 concurrent devices per account',
      'Session expires after 24 hours of inactivity',
      'Failed login attempts locked after 5 tries',
      'OTP verification required for new devices',
      'Premium accounts have priority access',
    ],
    createdBy: 'user-002',
    createdAt: '2025-09-15T10:00:00Z',
    updatedAt: '2025-10-15T14:20:00Z',
  },
  {
    id: 'api-fpt-002',
    name: 'FPT Play - Get Video Content API',
    endpoint: '/api/v2/content/videos/{videoId}',
    method: 'GET',
    description: 'Retrieve video metadata, streaming URLs and DRM information',
    fields: [
      { name: 'videoId', dataType: 'string', required: true, validation: 'alphanumeric', example: 'vid-12345abc' },
      { name: 'quality', dataType: 'string', required: false, validation: 'enum: sd, hd, fhd, 4k', example: 'fhd' },
      { name: 'subtitleLang', dataType: 'string', required: false, validation: 'ISO 639-1', example: 'vi' },
    ],
    statusCodes: [
      { code: 200, description: 'Content retrieved', scenario: 'Valid video ID and user has access' },
      { code: 401, description: 'Unauthorized', scenario: 'No valid session token' },
      { code: 403, description: 'Forbidden', scenario: 'User does not have subscription for this content' },
      { code: 404, description: 'Not found', scenario: 'Video ID does not exist' },
      { code: 451, description: 'Unavailable for legal reasons', scenario: 'Content blocked in user region' },
    ],
    businessRules: [
      'Free users limited to SD quality',
      'Premium users can access up to 4K quality',
      'Geographic restrictions apply per content license',
      'Concurrent streams limited by subscription tier',
      'DRM license expires after 48 hours',
    ],
    createdBy: 'user-002',
    createdAt: '2025-09-16T11:30:00Z',
    updatedAt: '2025-10-16T09:15:00Z',
  },
  {
    id: 'api-fpt-003',
    name: 'FPT Play - Subscribe Package API',
    endpoint: '/api/v2/subscription/purchase',
    method: 'POST',
    description: 'Purchase or upgrade subscription package',
    fields: [
      { name: 'userId', dataType: 'string', required: true, validation: 'UUID format', example: 'usr-abc123def' },
      { name: 'packageId', dataType: 'string', required: true, validation: 'alphanumeric', example: 'pkg-premium-monthly' },
      { name: 'paymentMethod', dataType: 'string', required: true, validation: 'enum: momo, vnpay, card, banking', example: 'momo' },
      { name: 'promoCode', dataType: 'string', required: false, validation: 'alphanumeric', example: 'FPTPLAY50' },
      { name: 'autoRenew', dataType: 'boolean', required: false, validation: 'true/false', example: 'true' },
    ],
    statusCodes: [
      { code: 201, description: 'Subscription created', scenario: 'Payment successful' },
      { code: 400, description: 'Bad request', scenario: 'Invalid package or payment method' },
      { code: 402, description: 'Payment required', scenario: 'Payment gateway declined' },
      { code: 409, description: 'Conflict', scenario: 'User already has active subscription' },
      { code: 422, description: 'Unprocessable entity', scenario: 'Invalid promo code or expired' },
    ],
    businessRules: [
      'Cannot downgrade mid-cycle, only at renewal',
      'Promo codes valid for new subscribers only',
      'Refund available within 7 days of purchase',
      'Free trial limited to one per user',
      'Family package supports up to 5 profiles',
    ],
    createdBy: 'user-002',
    createdAt: '2025-09-18T14:20:00Z',
    updatedAt: '2025-10-14T16:45:00Z',
  },
  {
    id: 'api-fang-001',
    name: 'FangTV - Live Channel Stream API',
    endpoint: '/api/v1/channels/{channelId}/stream',
    method: 'GET',
    description: 'Get live streaming URL for TV channel with CDN selection',
    fields: [
      { name: 'channelId', dataType: 'string', required: true, validation: 'numeric', example: 'ch-vtv1' },
      { name: 'quality', dataType: 'string', required: false, validation: 'enum: low, medium, high, auto', example: 'high' },
      { name: 'cdnNode', dataType: 'string', required: false, validation: 'region code', example: 'hanoi' },
    ],
    statusCodes: [
      { code: 200, description: 'Stream URL returned', scenario: 'Valid channel and user authenticated' },
      { code: 401, description: 'Unauthorized', scenario: 'No authentication token' },
      { code: 403, description: 'Forbidden', scenario: 'Channel requires premium subscription' },
      { code: 404, description: 'Not found', scenario: 'Channel ID does not exist or offline' },
      { code: 503, description: 'Service unavailable', scenario: 'CDN overload or maintenance' },
    ],
    businessRules: [
      'Free users can watch 20 channels only',
      'Premium users access 150+ channels',
      'Time-shifted viewing up to 7 days for premium',
      'Automatic CDN failover on connection issues',
      'Concurrent streams limited to 2 devices',
    ],
    createdBy: 'user-002',
    createdAt: '2025-10-01T08:00:00Z',
    updatedAt: '2025-10-15T10:30:00Z',
  },
  {
    id: 'api-fang-002',
    name: 'FangTV - EPG (Electronic Program Guide) API',
    endpoint: '/api/v1/channels/{channelId}/epg',
    method: 'GET',
    description: 'Get TV program schedule for specific channel and date range',
    fields: [
      { name: 'channelId', dataType: 'string', required: true, validation: 'alphanumeric', example: 'ch-vtv3' },
      { name: 'startDate', dataType: 'string', required: true, validation: 'ISO 8601 date', example: '2025-10-17T00:00:00Z' },
      { name: 'endDate', dataType: 'string', required: true, validation: 'ISO 8601 date', example: '2025-10-17T23:59:59Z' },
      { name: 'timezone', dataType: 'string', required: false, validation: 'IANA timezone', example: 'Asia/Ho_Chi_Minh' },
    ],
    statusCodes: [
      { code: 200, description: 'EPG data returned', scenario: 'Valid request parameters' },
      { code: 400, description: 'Bad request', scenario: 'Invalid date format or range too large' },
      { code: 404, description: 'Not found', scenario: 'No EPG data for channel or date' },
    ],
    businessRules: [
      'EPG data available up to 7 days in advance',
      'Historical EPG retained for 30 days',
      'Updates every 15 minutes for live data',
      'Reminder notifications require premium account',
    ],
    createdBy: 'user-002',
    createdAt: '2025-10-02T09:30:00Z',
    updatedAt: '2025-10-16T14:00:00Z',
  },
  {
    id: 'api-fang-003',
    name: 'FangTV - Record Program API',
    endpoint: '/api/v1/recording/schedule',
    method: 'POST',
    description: 'Schedule cloud DVR recording for TV program',
    fields: [
      { name: 'userId', dataType: 'string', required: true, validation: 'UUID format', example: 'usr-fangtv-123' },
      { name: 'channelId', dataType: 'string', required: true, validation: 'alphanumeric', example: 'ch-hbo' },
      { name: 'programId', dataType: 'string', required: true, validation: 'alphanumeric', example: 'prg-movie-001' },
      { name: 'startTime', dataType: 'string', required: true, validation: 'ISO 8601 datetime', example: '2025-10-18T20:00:00Z' },
      { name: 'duration', dataType: 'number', required: true, validation: 'minutes', example: '120' },
      { name: 'quality', dataType: 'string', required: false, validation: 'enum: sd, hd', example: 'hd' },
    ],
    statusCodes: [
      { code: 201, description: 'Recording scheduled', scenario: 'Valid request and storage available' },
      { code: 400, description: 'Bad request', scenario: 'Invalid time or duration' },
      { code: 403, description: 'Forbidden', scenario: 'DVR feature requires premium subscription' },
      { code: 409, description: 'Conflict', scenario: 'Recording time conflicts with existing schedule' },
      { code: 507, description: 'Insufficient storage', scenario: 'User DVR storage quota exceeded' },
    ],
    businessRules: [
      'Free users: 0 DVR storage',
      'Premium users: 50GB cloud DVR storage',
      'Recordings auto-delete after 30 days',
      'Maximum 10 concurrent recordings',
      'Cannot record premium movie channels',
    ],
    createdBy: 'user-002',
    createdAt: '2025-10-03T11:15:00Z',
    updatedAt: '2025-10-17T08:20:00Z',
  },
  {
    id: 'api-fpt-004',
    name: 'FPT Play - Notification Preferences API',
    endpoint: '/api/v2/users/{userId}/notification-preferences',
    method: 'PUT',
    description: 'Create or update notification delivery preferences across devices for an FPT Play subscriber',
    fields: [
      { name: 'userId', dataType: 'string', required: true, validation: 'UUID format', example: 'usr-fpt-001' },
      { name: 'channel', dataType: 'string', required: true, validation: 'enum: email, push, sms', example: 'push' },
      { name: 'enabled', dataType: 'boolean', required: true, validation: 'true/false', example: 'true' },
      { name: 'quietHours', dataType: 'object', required: false, validation: 'start/end ISO 8601 time', example: '{"start": "22:00", "end": "07:00"}' },
      { name: 'deviceType', dataType: 'string', required: false, validation: 'enum: web, mobile, tv, tablet', example: 'mobile' },
    ],
    statusCodes: [
      { code: 200, description: 'Preferences updated', scenario: 'Existing user updates notification settings' },
      { code: 201, description: 'Preferences created', scenario: 'First-time configuration for user' },
      { code: 400, description: 'Invalid preference payload', scenario: 'Missing required fields or invalid quiet hour format' },
      { code: 401, description: 'Unauthorized', scenario: 'User access token missing or expired' },
      { code: 409, description: 'Conflict', scenario: 'Simultaneous update detected from another device' },
    ],
    businessRules: [
      'Users may configure up to 5 simultaneous notification channels',
      'Quiet hours must not exceed a 24-hour range',
      'SMS notifications limited to premium or verified users',
      'Mobile push tokens expire after 30 days of inactivity',
      'Changes are propagated to all devices within 60 seconds',
    ],
    createdBy: 'user-001',
    createdAt: '2025-10-17T09:30:00Z',
    updatedAt: '2025-10-17T12:10:00Z',
  },
  {
    id: 'api-fang-004',
    name: 'FangTV - Account Preferences API',
    endpoint: '/api/v1/users/{userId}/preferences',
    method: 'PATCH',
    description: 'Update playback, subtitle, and parental control preferences for a FangTV account',
    fields: [
      { name: 'userId', dataType: 'string', required: true, validation: 'UUID format', example: 'usr-fang-789' },
      { name: 'preferredLanguage', dataType: 'string', required: false, validation: 'ISO 639-1', example: 'vi' },
      { name: 'defaultAudio', dataType: 'string', required: false, validation: 'enum: original, dubbed', example: 'original' },
      { name: 'parentalControls', dataType: 'object', required: false, validation: 'rating + pin code structure', example: '{"rating": "PG-13", "pin": "1234"}' },
      { name: 'autoplayNext', dataType: 'boolean', required: false, validation: 'true/false', example: 'false' },
    ],
    statusCodes: [
      { code: 200, description: 'Preferences updated', scenario: 'All validations pass' },
      { code: 202, description: 'Preferences accepted', scenario: 'Changes queued for background synchronization' },
      { code: 400, description: 'Bad request', scenario: 'Invalid parental control configuration' },
      { code: 401, description: 'Unauthorized', scenario: 'Missing or invalid bearer token' },
      { code: 423, description: 'Locked', scenario: 'Account locked due to failed parental PIN attempts' },
    ],
    businessRules: [
      'Parental control PIN changes require re-authentication',
      'Autoplay defaults to true for new users',
      'Language preferences limited to languages supported by selected channels',
      'Profile updates trigger device sync within 5 minutes',
      'Premium households may store up to 5 preference profiles',
    ],
    createdBy: 'user-002',
    createdAt: '2025-10-17T13:45:00Z',
    updatedAt: '2025-10-17T15:10:00Z',
  },
  {
    id: 'api-cdn-001',
    name: 'Media CDN - Edge Cache Invalidation API',
    endpoint: '/api/v1/edge/cache/invalidate',
    method: 'POST',
    description: 'Submit cache invalidation tasks targeting specific edge nodes and content patterns',
    fields: [
      { name: 'distributionId', dataType: 'string', required: true, validation: 'UUID format', example: 'cdn-dist-4521' },
      { name: 'pathPattern', dataType: 'string', required: true, validation: 'glob pattern', example: '/vod/series/*' },
      { name: 'priority', dataType: 'string', required: false, validation: 'enum: low, normal, high', example: 'high' },
      { name: 'scheduledAt', dataType: 'string', required: false, validation: 'ISO 8601 datetime', example: '2025-10-18T01:30:00Z' },
      { name: 'notifyEmails', dataType: 'array', required: false, validation: 'list of valid emails', example: '["ops@cdn.com"]' },
    ],
    statusCodes: [
      { code: 202, description: 'Invalidation accepted', scenario: 'Request queued for processing' },
      { code: 400, description: 'Bad request', scenario: 'Missing distribution ID or invalid pattern' },
      { code: 401, description: 'Unauthorized', scenario: 'Missing API key or invalid signature' },
      { code: 404, description: 'Distribution not found', scenario: 'Distribution ID does not exist' },
      { code: 429, description: 'Too many requests', scenario: 'Rate limit exceeded for cache invalidations' },
    ],
    businessRules: [
      'High priority invalidations limited to 10 per hour per distribution',
      'Scheduled invalidations must be at least 5 minutes in the future',
      'Wildcard invalidations require admin role',
      'Notification emails limited to verified domains',
      'Invalidations expire if not executed within 12 hours of scheduling',
    ],
    createdBy: 'user-001',
    createdAt: '2025-10-17T16:00:00Z',
    updatedAt: '2025-10-17T16:45:00Z',
  },
];

export const sampleTestRequirements: TestRequirement[] = [
  {
    id: 'req-001',
    specId: 'api-fpt-001',
    title: 'Validate successful FPT Play user login',
    description: 'Test that a user can login with valid credentials and receive access token',
    testType: 'happy',
    priority: 'high',
    criteria: [
      'Verify username/email format is correct',
      'Verify password meets minimum requirements',
      'Verify deviceId is provided in UUID format',
      'Verify response status code is 200',
      'Verify response contains access token and refresh token',
      'Verify session is created with 24-hour expiry',
    ],
    generatedAt: '2025-10-16T10:00:00Z',
  },
  {
    id: 'req-002',
    specId: 'api-fpt-001',
    title: 'Validate device limit enforcement',
    description: 'Test that login fails when user exceeds 5 concurrent devices',
    testType: 'exception',
    priority: 'high',
    criteria: [
      'Attempt to login with 6th device',
      'Verify response status code is 403',
      'Verify error message indicates device limit reached',
      'Verify no new session is created',
    ],
    generatedAt: '2025-10-16T10:00:00Z',
  },
  {
    id: 'req-003',
    specId: 'api-fpt-001',
    title: 'Validate rate limiting after failed attempts',
    description: 'Test that account is temporarily locked after 5 failed login attempts',
    testType: 'validation',
    priority: 'high',
    criteria: [
      'Perform 5 failed login attempts with wrong password',
      'Attempt 6th login with correct password',
      'Verify response status code is 429 (Too Many Requests)',
      'Verify error message indicates rate limit exceeded',
      'Verify account unlock after cooldown period',
    ],
    generatedAt: '2025-10-16T10:00:00Z',
  },
  {
    id: 'req-004',
    specId: 'api-fpt-002',
    title: 'Validate video content retrieval with valid subscription',
    description: 'Test that premium user can retrieve video metadata and streaming URL',
    testType: 'happy',
    priority: 'high',
    criteria: [
      'Verify valid videoId is provided',
      'Verify user has active premium subscription',
      'Verify response status code is 200',
      'Verify response contains video metadata and streaming URLs',
      'Verify DRM license information is included',
      'Verify quality options match subscription tier (up to 4K)',
    ],
    generatedAt: '2025-10-17T09:00:00Z',
  },
  {
    id: 'req-005',
    specId: 'api-fpt-002',
    title: 'Validate geographic content restriction',
    description: 'Test that content blocked in certain regions returns 451 status',
    testType: 'exception',
    priority: 'medium',
    criteria: [
      'Request video from restricted geographic region',
      'Verify response status code is 451 (Unavailable for Legal Reasons)',
      'Verify error message explains geographic restriction',
      'Verify no streaming URL is returned',
    ],
    generatedAt: '2025-10-17T09:15:00Z',
  },
  {
    id: 'req-006',
    specId: 'api-fang-001',
    title: 'Validate live channel streaming URL retrieval',
    description: 'Test that authenticated user can get live stream URL for TV channel',
    testType: 'happy',
    priority: 'high',
    criteria: [
      'Verify valid channelId is provided',
      'Verify user authentication token is valid',
      'Verify response status code is 200',
      'Verify response contains HLS/DASH streaming URL',
      'Verify CDN node selection based on user location',
      'Verify quality options are available (low/medium/high/auto)',
    ],
    generatedAt: '2025-10-16T11:00:00Z',
  },
  {
    id: 'req-007',
    specId: 'api-fang-003',
    title: 'Validate cloud DVR recording schedule',
    description: 'Test that premium user can schedule program recording',
    testType: 'happy',
    priority: 'high',
    criteria: [
      'Verify user has premium subscription with DVR access',
      'Verify recording time is in the future',
      'Verify storage quota is available (within 50GB limit)',
      'Verify response status code is 201',
      'Verify recording schedule is created successfully',
      'Verify recording metadata is returned',
    ],
    generatedAt: '2025-10-17T08:30:00Z',
  },
  {
    id: 'req-008',
    specId: 'api-fang-003',
    title: 'Validate DVR storage quota exceeded',
    description: 'Test that recording fails when user storage quota is full',
    testType: 'exception',
    priority: 'high',
    criteria: [
      'User storage quota is at 50GB limit',
      'Attempt to schedule new recording',
      'Verify response status code is 507 (Insufficient Storage)',
      'Verify error message indicates quota exceeded',
      'Verify suggestion to delete old recordings',
    ],
    generatedAt: '2025-10-17T08:45:00Z',
  },
];

export const sampleTestScripts: TestScript[] = [
  {
    id: 'script-001',
    requirementId: 'req-001',
    title: 'Test Successful User Registration',
    description: 'Verify user can register with valid data',
    language: 'javascript',
    framework: 'Postman/Newman',
    code: `pm.test("User registration successful", function () {
    const requestBody = {
        "email": "john.doe@example.com",
        "password": "SecurePass123!",
        "firstName": "John",
        "lastName": "Doe",
        "phoneNumber": "+84987654321",
        "dateOfBirth": "1990-05-15"
    };
    
    pm.sendRequest({
        url: pm.environment.get("baseUrl") + "/api/v1/users/register",
        method: "POST",
        header: {
            "Content-Type": "application/json"
        },
        body: {
            mode: "raw",
            raw: JSON.stringify(requestBody)
        }
    }, function (err, response) {
        pm.expect(err).to.be.null;
        pm.expect(response.code).to.equal(201);
        
        const jsonData = response.json();
        pm.expect(jsonData).to.have.property("userId");
        pm.expect(jsonData).to.have.property("email", "john.doe@example.com");
        pm.expect(jsonData).to.have.property("verificationToken");
        
        // Store userId for subsequent tests
        pm.environment.set("registeredUserId", jsonData.userId);
    });
});`,
    steps: [
      {
        order: 1,
        action: 'Prepare valid registration data',
        input: {
          email: 'john.doe@example.com',
          password: 'SecurePass123!',
          firstName: 'John',
          lastName: 'Doe',
        },
      },
      {
        order: 2,
        action: 'Send POST request to /api/v1/users/register',
      },
      {
        order: 3,
        action: 'Verify response status code',
        expectedOutput: 201,
        assertion: 'Status code should be 201',
      },
      {
        order: 4,
        action: 'Verify response contains userId',
        assertion: 'Response must include userId field',
      },
      {
        order: 5,
        action: 'Verify verification token is present',
        assertion: 'Response must include verificationToken',
      },
    ],
    mockData: {
      userId: 'usr-abc123def456',
      email: 'john.doe@example.com',
      firstName: 'John',
      lastName: 'Doe',
      verificationToken: 'tok-xyz789abc123',
      createdAt: '2025-10-16T10:30:00Z',
    },
    generatedAt: '2025-10-16T10:05:00Z',
  },
];

export const sampleAuthUsers: AuthUser[] = [
  {
    id: 'user-001',
    name: 'Nguyen Van Minh',
    email: 'minh.nguyen@company.com',
    password: 'Demo@123',
    role: 'QC',
    createdAt: '2025-09-01T08:00:00Z',
    lastLogin: '2025-10-17T09:30:00Z',
  },
  {
    id: 'user-002',
    name: 'Tran Thi Lan',
    email: 'lan.tran@company.com',
    password: 'Demo@123',
    role: 'BA',
    createdAt: '2025-08-15T10:00:00Z',
    lastLogin: '2025-10-16T14:20:00Z',
  },
  {
    id: 'user-003',
    name: 'Le Hoang Nam',
    email: 'nam.le@company.com',
    password: 'Demo@123',
    role: 'Developer',
    createdAt: '2025-09-10T11:30:00Z',
    lastLogin: '2025-10-15T16:45:00Z',
  },
];

export const sampleProjects: Project[] = [
  {
    id: 'proj-001',
    name: 'FPT Play',
    description: 'Comprehensive API testing suite for FPT Play streaming platform - authentication, video content delivery, subscription management, and payment integration',
    status: 'active',
    createdBy: 'user-001',
    teamMembers: [
      { userId: 'user-001', role: 'owner', joinedAt: '2025-09-15T10:00:00Z' },
      { userId: 'user-002', role: 'admin', joinedAt: '2025-09-16T10:00:00Z' },
      { userId: 'user-003', role: 'editor', joinedAt: '2025-09-20T10:00:00Z' },
    ],
    features: [],
    createdAt: '2025-09-15T10:00:00Z',
    updatedAt: '2025-10-17T09:30:00Z',
  },
  {
    id: 'proj-002',
    name: 'FangTV',
    description: 'Complete testing framework for FangTV live streaming service - channel streaming, EPG, cloud DVR, and multi-device playback',
    status: 'active',
    createdBy: 'user-002',
    teamMembers: [
      { userId: 'user-002', role: 'owner', joinedAt: '2025-10-01T14:00:00Z' },
      { userId: 'user-001', role: 'viewer', joinedAt: '2025-10-02T14:00:00Z' },
    ],
    features: [],
    createdAt: '2025-10-01T14:00:00Z',
    updatedAt: '2025-10-16T11:20:00Z',
  },
  {
    id: 'proj-003',
    name: 'Media CDN Platform',
    description: 'API testing for content delivery network optimization and adaptive bitrate streaming',
    status: 'draft',
    createdBy: 'user-001',
    teamMembers: [
      { userId: 'user-001', role: 'owner', joinedAt: '2025-10-10T08:30:00Z' },
    ],
    features: [],
    createdAt: '2025-10-10T08:30:00Z',
    updatedAt: '2025-10-10T08:30:00Z',
  },
];

export const sampleFeatures: Feature[] = [
  {
    id: 'feat-001',
    projectId: 'proj-001',
    name: 'User Authentication & Session Management',
    description: 'Login, logout, token refresh, device management, and multi-device concurrent access control for FPT Play',
    apiSpecs: ['api-fpt-001'],
    status: 'completed',
    createdBy: 'user-002',
    createdAt: '2025-09-16T09:00:00Z',
    updatedAt: '2025-10-15T16:00:00Z',
  },
  {
    id: 'feat-002',
    projectId: 'proj-001',
    name: 'Video Content Delivery',
    description: 'Streaming URL generation, quality selection, DRM licensing, subtitle management for FPT Play videos',
    apiSpecs: ['api-fpt-002'],
    status: 'in-progress',
    createdBy: 'user-002',
    createdAt: '2025-09-20T10:30:00Z',
    updatedAt: '2025-10-17T08:45:00Z',
  },
  {
    id: 'feat-003',
    projectId: 'proj-001',
    name: 'Subscription & Payment',
    description: 'Package subscription, payment gateway integration, promo codes, auto-renewal management',
    apiSpecs: ['api-fpt-003'],
    status: 'in-progress',
    createdBy: 'user-002',
    createdAt: '2025-10-05T11:00:00Z',
    updatedAt: '2025-10-16T13:30:00Z',
  },
  {
    id: 'feat-004',
    projectId: 'proj-002',
    name: 'Live TV Streaming',
    description: 'Channel stream URL delivery, CDN selection, quality adaptation, concurrent stream limits for FangTV',
    apiSpecs: ['api-fang-001'],
    status: 'completed',
    createdBy: 'user-002',
    createdAt: '2025-10-02T09:15:00Z',
    updatedAt: '2025-10-16T11:20:00Z',
  },
  {
    id: 'feat-005',
    projectId: 'proj-002',
    name: 'EPG & Program Guide',
    description: 'Electronic program guide retrieval, schedule display, program search and reminders',
    apiSpecs: ['api-fang-002'],
    status: 'completed',
    createdBy: 'user-002',
    createdAt: '2025-10-03T10:00:00Z',
    updatedAt: '2025-10-16T14:45:00Z',
  },
  {
    id: 'feat-006',
    projectId: 'proj-002',
    name: 'Cloud DVR Recording',
    description: 'Schedule recordings, manage storage quota, playback recorded content, series recording',
    apiSpecs: ['api-fang-003'],
    status: 'in-progress',
    createdBy: 'user-001',
    createdAt: '2025-10-04T08:30:00Z',
    updatedAt: '2025-10-17T09:15:00Z',
  },
  {
    id: 'feat-007',
    projectId: 'proj-001',
    name: 'Notification & Engagement Center',
    description: 'Notification preference management, watchlist reminders, and targeted engagement campaigns for FPT Play users',
    apiSpecs: ['api-fpt-004'],
    status: 'pending',
    createdBy: 'user-001',
    createdAt: '2025-10-18T07:45:00Z',
    updatedAt: '2025-10-18T07:45:00Z',
  },
  {
    id: 'feat-008',
    projectId: 'proj-002',
    name: 'Account Preferences & Personalization',
    description: 'Profile editing, parental controls, multi-language subtitle defaults, and playback personalization for FangTV households',
    apiSpecs: ['api-fang-004'],
    status: 'in-progress',
    createdBy: 'user-002',
    createdAt: '2025-10-18T09:15:00Z',
    updatedAt: '2025-10-18T12:40:00Z',
  },
  {
    id: 'feat-009',
    projectId: 'proj-003',
    name: 'Edge Cache Orchestration',
    description: 'Automated cache invalidation, edge node targeting, and performance telemetry for the Media CDN platform',
    apiSpecs: ['api-cdn-001'],
    status: 'pending',
    createdBy: 'user-001',
    createdAt: '2025-10-18T10:20:00Z',
    updatedAt: '2025-10-18T10:20:00Z',
  },
];

export const sampleVersions: Version[] = [
  {
    id: 'ver-001',
    projectId: 'proj-001',
    featureId: 'feat-001',
    versionNumber: '1.0.0',
    title: 'FPT Play Authentication V1 - Initial Release',
    description: 'Complete test coverage for login API with device management and rate limiting',
    changes: [
      {
        type: 'added',
        description: 'Login happy path with valid credentials test',
        timestamp: '2025-10-15T10:00:00Z',
      },
      {
        type: 'added',
        description: 'Device limit validation (max 5 concurrent devices)',
        timestamp: '2025-10-15T10:30:00Z',
      },
      {
        type: 'added',
        description: 'Failed login rate limiting tests',
        timestamp: '2025-10-15T11:00:00Z',
      },
      {
        type: 'added',
        description: 'Session expiry validation after 24 hours',
        timestamp: '2025-10-15T11:30:00Z',
      },
    ],
    testScripts: ['script-001'],
    createdBy: 'user-001',
    createdAt: '2025-10-15T16:00:00Z',
    status: 'published',
  },
  {
    id: 'ver-002',
    projectId: 'proj-001',
    featureId: 'feat-001',
    versionNumber: '1.1.0',
    title: 'FPT Play Authentication V1.1 - Security Enhancement',
    description: 'Added OTP verification and enhanced security tests',
    changes: [
      {
        type: 'added',
        description: 'OTP verification for new device tests',
        timestamp: '2025-10-16T09:00:00Z',
      },
      {
        type: 'modified',
        description: 'Updated rate limiting to 429 status code',
        timestamp: '2025-10-16T10:00:00Z',
      },
      {
        type: 'fixed',
        description: 'Fixed token expiry assertion timing issue',
        timestamp: '2025-10-16T11:00:00Z',
      },
      {
        type: 'added',
        description: 'Priority access tests for premium accounts',
        timestamp: '2025-10-16T14:00:00Z',
      },
    ],
    testScripts: ['script-001'],
    createdBy: 'user-001',
    createdAt: '2025-10-16T15:30:00Z',
    status: 'published',
  },
  {
    id: 'ver-003',
    projectId: 'proj-001',
    featureId: 'feat-002',
    versionNumber: '2.0.0',
    title: 'FPT Play Video Content Delivery - Initial',
    description: 'Video metadata retrieval and streaming URL generation with DRM',
    changes: [
      {
        type: 'added',
        description: 'Get video metadata happy path tests',
        timestamp: '2025-10-17T08:00:00Z',
      },
      {
        type: 'added',
        description: 'Quality selection validation (SD/HD/FHD/4K)',
        timestamp: '2025-10-17T09:00:00Z',
      },
      {
        type: 'added',
        description: 'DRM license validation tests',
        timestamp: '2025-10-17T09:30:00Z',
      },
      {
        type: 'added',
        description: 'Geographic restriction tests (451 status)',
        timestamp: '2025-10-17T10:00:00Z',
      },
    ],
    testScripts: [],
    createdBy: 'user-001',
    createdAt: '2025-10-17T11:30:00Z',
    status: 'draft',
  },
  {
    id: 'ver-004',
    projectId: 'proj-001',
    featureId: 'feat-003',
    versionNumber: '1.0.0',
    title: 'FPT Play Subscription Purchase V1',
    description: 'Subscription package purchase with payment gateway integration',
    changes: [
      {
        type: 'added',
        description: 'Package purchase happy path tests',
        timestamp: '2025-10-16T13:00:00Z',
      },
      {
        type: 'added',
        description: 'Payment method validation (MoMo, VNPay, Banking)',
        timestamp: '2025-10-16T13:30:00Z',
      },
      {
        type: 'added',
        description: 'Promo code validation tests',
        timestamp: '2025-10-16T14:00:00Z',
      },
    ],
    testScripts: ['script-002'],
    createdBy: 'user-001',
    createdAt: '2025-10-16T16:00:00Z',
    status: 'published',
  },
  {
    id: 'ver-005',
    projectId: 'proj-002',
    featureId: 'feat-004',
    versionNumber: '1.0.0',
    title: 'FangTV Live Streaming V1 - Production Ready',
    description: 'Complete test suite for live TV channel streaming with CDN failover',
    changes: [
      {
        type: 'added',
        description: 'Channel stream URL retrieval tests',
        timestamp: '2025-10-16T10:00:00Z',
      },
      {
        type: 'added',
        description: 'CDN node selection validation',
        timestamp: '2025-10-16T10:30:00Z',
      },
      {
        type: 'added',
        description: 'Quality adaptation tests (low/medium/high/auto)',
        timestamp: '2025-10-16T11:00:00Z',
      },
      {
        type: 'added',
        description: 'Concurrent stream limit tests (2 devices)',
        timestamp: '2025-10-16T11:30:00Z',
      },
    ],
    testScripts: ['script-003', 'script-004'],
    createdBy: 'user-002',
    createdAt: '2025-10-16T12:00:00Z',
    status: 'published',
  },
  {
    id: 'ver-006',
    projectId: 'proj-002',
    featureId: 'feat-005',
    versionNumber: '1.0.0',
    title: 'FangTV EPG V1 - Complete Implementation',
    description: 'Electronic program guide with schedule retrieval and timezone support',
    changes: [
      {
        type: 'added',
        description: 'EPG data retrieval for date range tests',
        timestamp: '2025-10-16T14:00:00Z',
      },
      {
        type: 'added',
        description: 'Timezone conversion validation',
        timestamp: '2025-10-16T14:30:00Z',
      },
      {
        type: 'added',
        description: '7-day advance schedule tests',
        timestamp: '2025-10-16T15:00:00Z',
      },
    ],
    testScripts: ['script-005'],
    createdBy: 'user-002',
    createdAt: '2025-10-16T16:30:00Z',
    status: 'published',
  },
  {
    id: 'ver-007',
    projectId: 'proj-002',
    featureId: 'feat-006',
    versionNumber: '0.8.0',
    title: 'FangTV Cloud DVR Beta - Recording Schedule',
    description: 'Beta release of cloud DVR recording scheduling functionality',
    changes: [
      {
        type: 'added',
        description: 'Schedule recording happy path tests',
        timestamp: '2025-10-17T08:00:00Z',
      },
      {
        type: 'added',
        description: 'Storage quota validation (50GB limit)',
        timestamp: '2025-10-17T08:30:00Z',
      },
      {
        type: 'added',
        description: 'Recording conflict detection tests',
        timestamp: '2025-10-17T09:00:00Z',
      },
    ],
    testScripts: [],
    createdBy: 'user-001',
    createdAt: '2025-10-17T09:30:00Z',
    status: 'draft',
  },
];
